// <auto-generated />
using System;
using HospitalEpidemiology;
using HospitalEpidemiology.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace HospitalEpidemiology.Migrations
{
    [DbContext(typeof(HospitalEpidemiologyDb))]
    [Migration("20230318132003_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.2.23128.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "his_location_type", new[] { "bed_location", "room", "unit", "hospital" });
            NpgsqlModelBuilderExtensions.UseIdentityAlwaysColumns(modelBuilder);

            modelBuilder.Entity("HospitalEpidemiology.Model.BedLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("room_id");

                    b.HasKey("Id")
                        .HasName("pk_bed_locations");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("ix_bed_locations_room_id");

                    b.ToTable("bed_locations", (string)null);
                });

            modelBuilder.Entity("HospitalEpidemiology.Model.HisLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<HisLocationType>("Type")
                        .HasColumnType("his_location_type")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_his_locations");

                    b.ToTable("his_locations", (string)null);

                    b.HasDiscriminator<HisLocationType>("Type").IsComplete(true);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("HospitalEpidemiology.Model.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_hospitals");

                    b.ToTable("hospitals", (string)null);
                });

            modelBuilder.Entity("HospitalEpidemiology.Model.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date")
                        .HasColumnName("birthdate");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("family_name");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("given_name");

                    b.HasKey("Id")
                        .HasName("pk_patients");

                    b.ToTable("patients", (string)null);
                });

            modelBuilder.Entity("HospitalEpidemiology.Model.PatientStay", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("id"));

                    b.Property<int>("HisLocationId")
                        .HasColumnType("integer")
                        .HasColumnName("his_location_id");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.Property<NpgsqlRange<DateTime>>("Stay")
                        .HasColumnType("tstzrange")
                        .HasColumnName("stay");

                    b.HasKey("id")
                        .HasName("pk_patient_stays");

                    b.HasIndex("HisLocationId")
                        .HasDatabaseName("ix_patient_stays_his_location_id");

                    b.HasIndex("PatientId")
                        .HasDatabaseName("ix_patient_stays_patient_id");

                    b.ToTable("patient_stays", (string)null);
                });

            modelBuilder.Entity("HospitalEpidemiology.Model.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer")
                        .HasColumnName("unit_id");

                    b.HasKey("Id")
                        .HasName("pk_rooms");

                    b.HasIndex("UnitId")
                        .HasDatabaseName("ix_rooms_unit_id");

                    b.ToTable("rooms", (string)null);
                });

            modelBuilder.Entity("HospitalEpidemiology.Model.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<int>("HospitalId")
                        .HasColumnType("integer")
                        .HasColumnName("hospital_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_units");

                    b.HasIndex("HospitalId")
                        .HasDatabaseName("ix_units_hospital_id");

                    b.ToTable("units", (string)null);
                });

            modelBuilder.Entity("HospitalEpidemiology.Model.HisBedLocation", b =>
                {
                    b.HasBaseType("HospitalEpidemiology.Model.HisLocation");

                    b.Property<int>("BedLocationId")
                        .HasColumnType("integer")
                        .HasColumnName("bed_location_id");

                    b.HasIndex("BedLocationId")
                        .HasDatabaseName("ix_his_locations_bed_location_id");

                    b.HasDiscriminator().HasValue(HisLocationType.BedLocation);
                });

            modelBuilder.Entity("HospitalEpidemiology.Model.HisHospitalLocation", b =>
                {
                    b.HasBaseType("HospitalEpidemiology.Model.HisLocation");

                    b.Property<int>("HospitalId")
                        .HasColumnType("integer")
                        .HasColumnName("hospital_id");

                    b.HasIndex("HospitalId")
                        .HasDatabaseName("ix_his_locations_hospital_id");

                    b.HasDiscriminator().HasValue(HisLocationType.Hospital);
                });

            modelBuilder.Entity("HospitalEpidemiology.Model.HisRoomLocation", b =>
                {
                    b.HasBaseType("HospitalEpidemiology.Model.HisLocation");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("room_id");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("ix_his_locations_room_id");

                    b.HasDiscriminator().HasValue(HisLocationType.Room);
                });

            modelBuilder.Entity("HospitalEpidemiology.Model.HisUnitLocation", b =>
                {
                    b.HasBaseType("HospitalEpidemiology.Model.HisLocation");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer")
                        .HasColumnName("unit_id");

                    b.HasIndex("UnitId")
                        .HasDatabaseName("ix_his_locations_unit_id");

                    b.HasDiscriminator().HasValue(HisLocationType.Unit);
                });

            modelBuilder.Entity("HospitalEpidemiology.Model.BedLocation", b =>
                {
                    b.HasOne("HospitalEpidemiology.Model.Room", "Room")
                        .WithMany("BedLocations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bed_locations_rooms_room_id");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalEpidemiology.Model.PatientStay", b =>
                {
                    b.HasOne("HospitalEpidemiology.Model.HisLocation", "HisLocation")
                        .WithMany()
                        .HasForeignKey("HisLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_patient_stays_his_locations_his_location_id");

                    b.HasOne("HospitalEpidemiology.Model.Patient", "Patient")
                        .WithMany("Stays")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_patient_stays_patients_patient_id");

                    b.Navigation("HisLocation");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalEpidemiology.Model.Room", b =>
                {
                    b.HasOne("HospitalEpidemiology.Model.Unit", "Unit")
                        .WithMany("Rooms")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rooms_units_unit_id");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("HospitalEpidemiology.Model.Unit", b =>
                {
                    b.HasOne("HospitalEpidemiology.Model.Hospital", "Hospital")
                        .WithMany("Units")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_units_hospitals_hospital_id");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("HospitalEpidemiology.Model.HisBedLocation", b =>
                {
                    b.HasOne("HospitalEpidemiology.Model.BedLocation", "BedLocation")
                        .WithMany()
                        .HasForeignKey("BedLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_his_locations_bed_locations_bed_location_id");

                    b.Navigation("BedLocation");
                });

            modelBuilder.Entity("HospitalEpidemiology.Model.HisHospitalLocation", b =>
                {
                    b.HasOne("HospitalEpidemiology.Model.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_his_locations_hospitals_hospital_id");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("HospitalEpidemiology.Model.HisRoomLocation", b =>
                {
                    b.HasOne("HospitalEpidemiology.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_his_locations_rooms_room_id");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalEpidemiology.Model.HisUnitLocation", b =>
                {
                    b.HasOne("HospitalEpidemiology.Model.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_his_locations_units_unit_id");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("HospitalEpidemiology.Model.Hospital", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("HospitalEpidemiology.Model.Patient", b =>
                {
                    b.Navigation("Stays");
                });

            modelBuilder.Entity("HospitalEpidemiology.Model.Room", b =>
                {
                    b.Navigation("BedLocations");
                });

            modelBuilder.Entity("HospitalEpidemiology.Model.Unit", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
